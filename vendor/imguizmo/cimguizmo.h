// This file modified manually but was originally generated by generator.lua
// from https://github.com/cimgui/cimguizmo
//based on ImGuizmo.h file version 1.91.3 WIP from https://github.com/CedricGuillemet/ImGuizmo
#ifndef CIMGUIZMO_INCLUDED
#define CIMGUIZMO_INCLUDED

#include "cimgui.h"

#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS

typedef struct ImGuiWindow_t ImGuiWindow;
// struct ImGuiWindow;
typedef enum {
      IMGUIZMO_TRANSLATE_X = (1u << 0),
      IMGUIZMO_TRANSLATE_Y = (1u << 1),
      IMGUIZMO_TRANSLATE_Z = (1u << 2),
      IMGUIZMO_ROTATE_X = (1u << 3),
      IMGUIZMO_ROTATE_Y = (1u << 4),
      IMGUIZMO_ROTATE_Z = (1u << 5),
      IMGUIZMO_ROTATE_SCREEN = (1u << 6),
      IMGUIZMO_SCALE_X = (1u << 7),
      IMGUIZMO_SCALE_Y = (1u << 8),
      IMGUIZMO_SCALE_Z = (1u << 9),
      IMGUIZMO_BOUNDS = (1u << 10),
      IMGUIZMO_SCALE_XU = (1u << 11),
      IMGUIZMO_SCALE_YU = (1u << 12),
      IMGUIZMO_SCALE_ZU = (1u << 13),
      IMGUIZMO_TRANSLATE = IMGUIZMO_TRANSLATE_X | IMGUIZMO_TRANSLATE_Y | IMGUIZMO_TRANSLATE_Z,
      IMGUIZMO_ROTATE = IMGUIZMO_ROTATE_X | IMGUIZMO_ROTATE_Y | IMGUIZMO_ROTATE_Z | IMGUIZMO_ROTATE_SCREEN,
      IMGUIZMO_SCALE = IMGUIZMO_SCALE_X | IMGUIZMO_SCALE_Y | IMGUIZMO_SCALE_Z,
      IMGUIZMO_SCALEU = IMGUIZMO_SCALE_XU | IMGUIZMO_SCALE_YU | IMGUIZMO_SCALE_ZU,
      IMGUIZMO_UNIVERSAL = IMGUIZMO_TRANSLATE | IMGUIZMO_ROTATE | IMGUIZMO_SCALEU
   }OPERATION;
typedef enum {
      IMGUIZMO_LOCAL,
      IMGUIZMO_WORLD
   }MODE;
typedef enum {
      IMGUIZMO_DIRECTION_X,
      IMGUIZMO_DIRECTION_Y,
      IMGUIZMO_DIRECTION_Z,
      IMGUIZMO_PLANE_X,
      IMGUIZMO_PLANE_Y,
      IMGUIZMO_PLANE_Z,
      IMGUIZMO_SELECTION,
      IMGUIZMO_INACTIVE,
      IMGUIZMO_TRANSLATION_LINE,
      IMGUIZMO_SCALE_LINE,
      IMGUIZMO_ROTATION_USING_BORDER,
      IMGUIZMO_ROTATION_USING_FILL,
      IMGUIZMO_HATCHED_AXIS_LINES,
      IMGUIZMO_TEXT,
      IMGUIZMO_TEXT_SHADOW,
      IMGUIZMO_COUNT
   }COLOR;
typedef struct Style Style;
struct Style
{
      float TranslationLineThickness;
      float TranslationLineArrowSize;
      float RotationLineThickness;
      float RotationOuterLineThickness;
      float ScaleLineThickness;
      float ScaleLineCircleSize;
      float HatchedAxisLineThickness;
      float CenterCircleSize;
      ImVec4 Colors[IMGUIZMO_COUNT];
};
#else
#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef ImGuizmo::Style Style;
typedef ImGuizmo::COLOR COLOR;
typedef ImGuizmo::MODE MODE;
typedef ImGuizmo::OPERATION OPERATION;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API void ImGuizmo_SetDrawlist(ImDrawList* drawlist);
CIMGUI_API void ImGuizmo_BeginFrame(void);
CIMGUI_API void ImGuizmo_SetImGuiContext(ImGuiContext* ctx);
CIMGUI_API bool ImGuizmo_IsOver_Nil(void);
CIMGUI_API bool ImGuizmo_IsUsing(void);
CIMGUI_API bool ImGuizmo_IsUsingViewManipulate(void);
CIMGUI_API bool ImGuizmo_IsViewManipulateHovered(void);
CIMGUI_API bool ImGuizmo_IsUsingAny(void);
CIMGUI_API void ImGuizmo_Enable(bool enable);
CIMGUI_API void ImGuizmo_DecomposeMatrixToComponents(const float* matrix,float* translation,float* rotation,float* scale);
CIMGUI_API void ImGuizmo_RecomposeMatrixFromComponents(const float* translation,const float* rotation,const float* scale,float* matrix);
CIMGUI_API void ImGuizmo_SetRect(float x,float y,float width,float height);
CIMGUI_API void ImGuizmo_SetOrthographic(bool isOrthographic);
CIMGUI_API void ImGuizmo_DrawCubes(const float* view,const float* projection,const float* matrices,int matrixCount);
CIMGUI_API void ImGuizmo_DrawGrid(const float* view,const float* projection,const float* matrix,const float gridSize);
CIMGUI_API bool ImGuizmo_Manipulate(const float* view,const float* projection,OPERATION operation,MODE mode,float* matrix,float* deltaMatrix,const float* snap,const float* localBounds,const float* boundsSnap);
CIMGUI_API void ImGuizmo_ViewManipulate_Float(float* view,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor);
CIMGUI_API void ImGuizmo_ViewManipulate_FloatPtr(float* view,const float* projection,OPERATION operation,MODE mode,float* matrix,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor);
CIMGUI_API void ImGuizmo_SetAlternativeWindow(ImGuiWindow* window);
CIMGUI_API void ImGuizmo_SetID(int id);
CIMGUI_API void ImGuizmo_PushID_Str(const char* str_id);
CIMGUI_API void ImGuizmo_PushID_StrStr(const char* str_id_begin,const char* str_id_end);
CIMGUI_API void ImGuizmo_PushID_Ptr(const void* ptr_id);
CIMGUI_API void ImGuizmo_PushID_Int(int int_id);
CIMGUI_API void ImGuizmo_PopID(void);
CIMGUI_API ImGuiID ImGuizmo_GetID_Str(const char* str_id);
CIMGUI_API ImGuiID ImGuizmo_GetID_StrStr(const char* str_id_begin,const char* str_id_end);
CIMGUI_API ImGuiID ImGuizmo_GetID_Ptr(const void* ptr_id);
CIMGUI_API bool ImGuizmo_IsOver_OPERATION(OPERATION op);
CIMGUI_API void ImGuizmo_SetGizmoSizeClipSpace(float value);
CIMGUI_API void ImGuizmo_AllowAxisFlip(bool value);
CIMGUI_API void ImGuizmo_SetAxisLimit(float value);
CIMGUI_API void ImGuizmo_SetAxisMask(bool x,bool y,bool z);
CIMGUI_API void ImGuizmo_SetPlaneLimit(float value);
CIMGUI_API bool ImGuizmo_IsOver_FloatPtr(float* position,float pixelRadius);
CIMGUI_API Style* Style_Style(void);
CIMGUI_API void Style_destroy(Style* self);
CIMGUI_API Style* ImGuizmo_GetStyle(void);



#endif //CIMGUIZMO_INCLUDED




